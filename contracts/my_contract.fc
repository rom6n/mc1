#include "imports/stdlib.fc";

const op::edit_message = "op::edit_message"c; ;; create an opcode from string using the "c" prefix, this results in 6e1d23c8 opcode in this case
const op::delete_message = "op::delete_message"c; ;; 78efd3e0
const op::change_access = "op::change_access"c; ;; 708be4d1
const op::transfer_ownership = "op::transfer_ownership"c; ;; 295e75a9

const const::min_ton_for_storage = 10000000;

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
;;global slice ctx_owner;
;;global slice ctx_message;
;;global slice ctx_recent_sender;
;;global int ctx_access;
;;global int message_time;

;; load_data populates storage variables using stored data
(slice, int, slice, cell, int) load_data() inline {
    var ds = get_data().begin_parse();
    slice ctx_owner = ds~load_msg_addr();
    int ctx_access = ds~load_uint(32);
    slice ctx_recent_sender = ds~load_msg_addr();
    cell ctx_message = ds~load_ref(); 
    int message_time = ds~load_uint(64);
    ds.end_parse();

    return (ctx_owner, ctx_access, ctx_recent_sender, ctx_message, message_time);
}

;; save_data stores storage variables as a cell into persistent storage
() save_data(slice ctx_owner, int ctx_access, slice ctx_recent_sender, cell ctx_message, int message_time) impure inline {
    set_data(
        begin_cell()
            .store_slice(ctx_owner)
            .store_uint(ctx_access, 32)
            .store_slice(ctx_recent_sender)
            .store_ref(ctx_message)
            .store_uint(message_time, 64)
            .end_cell()
    );
}

() edit_message(slice ctx_owner, int ctx_access, cell new_message, slice sender) impure inline {
    save_data(ctx_owner, ctx_access, sender, new_message, now());
}

() delete_message(slice ctx_owner, int ctx_access, int message_time) impure inline {
    set_data(
        begin_cell()
        .store_slice(ctx_owner)
        .store_uint(ctx_access, 32)
        .store_slice(my_address())
        .store_ref(begin_cell().end_cell())
        .store_uint(message_time, 64)
        .end_cell()
    );
}

() change_access(slice ctx_owner, int new_access, slice ctx_recent_sender, cell ctx_message, int message_time) impure inline {
    save_data(ctx_owner, new_access, ctx_recent_sender, ctx_message, message_time);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender = cs~load_msg_addr(); 

    var (ctx_owner, ctx_access, ctx_recent_sender, ctx_message, message_time) = load_data();

    int op = in_msg_body~load_uint(32); ;; опкод
    int query_id = in_msg_body~load_uint(64); ;; Принято использовать и принимать query_id


    if (op == 10) {
        if (ctx_access == 0) {
            throw_unless(201, equal_slice_bits(sender, ctx_owner));
        }

        cell new_message = in_msg_body~load_ref();
        edit_message(ctx_owner, ctx_access, new_message, sender);
        return ();
    }

    if (op == 11) {
        if (ctx_access == 0) {
            throw_unless(202, equal_slice_bits(sender, ctx_owner));
        }

        throw_unless(203, equal_slice_bits(sender, ctx_recent_sender) |
             equal_slice_bits(sender, ctx_owner));

        delete_message(ctx_owner, ctx_access, message_time);
        return ();
    }

    if (op == 12) {
        throw_unless(204, equal_slice_bits(sender, ctx_owner));
        int new_access = in_msg_body~load_uint(32);
        change_access(ctx_owner, new_access, ctx_recent_sender, ctx_message, message_time);
        return ();
    }

    if (op == 13) {
        throw_unless(205, equal_slice_bits(sender, ctx_owner));
        slice transfer_to = in_msg_body~load_msg_addr();
        save_data(transfer_to, ctx_access, ctx_recent_sender, ctx_message, message_time);
        return ();
    }

    if (op == 1) {  ;; просто принимаем TON
        return ();
    }

    if (op == 2) {  ;; выводим TON из контракта 
        throw_unless(206, equal_slice_bits(sender, ctx_owner));
        int amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        int balance = balance - amount;
        throw_if(301, balance < const::min_ton_for_storage);

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        send_raw_message(msg.end_cell(), 1);

        return();
    }

    throw(100); ;; Если нужного op нет
}


(slice, int, slice, cell, int) get_contract_data() method_id {
    var (ctx_owner, ctx_access, ctx_recent_sender, ctx_message, message_time) = load_data();
    return (
        ctx_owner, 
        ctx_access, ;; 0 - запрещен, 1 - разрешен
        ctx_recent_sender, 
        ctx_message,
        message_time
        );
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}


